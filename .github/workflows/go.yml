name: CI

on:
  push:
    branches: [main, develop]
  pull_request:
    branches: [main, develop]

jobs:
  lint:
    name: Lint Code
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Setup Go
        uses: actions/setup-go@v5
        with:
          go-version: '1.24'
          cache: true

      - name: Download dependencies
        run: go mod download

      # 
      - name: Build dependencies
        run: go build -tags=linux ./...

      - name: Run golangci-lint
        uses: golangci/golangci-lint-action@v8
        with:
          version: latest
          args: --config=.golangci.yml

  test:
    name: Test (${{ matrix.os }})
    runs-on: ${{ matrix.os }}
    needs: lint
    strategy:
      fail-fast: false
      matrix:
        os: [ubuntu-latest, windows-latest]
        include:
          - os: ubuntu-latest
            build-tags: "amd64 linux"
          - os: windows-latest
            build-tags: "amd64 windows"

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Go
        uses: actions/setup-go@v5
        with:
          go-version: '1.24'
          cache: true
          cache-dependency-path: go.sum

      - name: Run tests
        run: go test -v -cover -coverprofile=coverage.txt -tags "${{ matrix.build-tags }}" ./...

      - name: Upload coverage
        uses: actions/upload-artifact@v4
        with:
          name: coverage-${{ matrix.os }}
          path: coverage.txt

  quality-gate:
    name: Quality Gate
    needs: test
    runs-on: ubuntu-latest
    steps:
      - name: Download coverage reports
        uses: actions/download-artifact@v4
        with:
          path: coverage-reports

      - name: Check coverage thresholds
        run: |
          MIN=80
          FAILED=0
          
          for report in coverage-reports/*; do
            cov=$(go tool cover -func $report | grep total | awk '{print $3}' | sed 's/%//')
            os=$(basename $report | sed -E 's/coverage-(.+)\.txt/\1/')
            echo "$os coverage: $cov%"
          
            if (( $(echo "$cov < $MIN" | bc -l) )); then
              echo "::error::Coverage for $os is below $MIN%"
              FAILED=1
            fi
          done
          
          if [ $FAILED -eq 1 ]; then
            exit 1
          fi
          echo "âœ… All coverage targets met"